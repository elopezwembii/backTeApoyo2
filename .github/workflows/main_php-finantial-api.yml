name: Build and deploy PHP app to Azure Web App - php-finantial-api

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.2'

      - name: Check if composer.json exists
        id: check_files
        uses: andstor/file-existence-action@v1
        with:
          files: 'composer.json'

      - name: Run composer install if composer.json exists
        if: steps.check_files.outputs.files_exists == 'true'
        run: composer validate --no-check-publish && composer install --prefer-dist --no-progress

      - name: Zip artifact for deployment
        run: zip release.zip ./* -r

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: php-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write # This is required for requesting the JWT

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: php-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZUREAPPSERVICE_CLIENTID }}
          tenant-id: ${{ secrets.AZUREAPPSERVICE_TENANTID }}
          subscription-id: ${{ secrets.AZUREAPPSERVICE_SUBSCRIPTIONID }}

      - name: 'Deploy to Azure Web App'
        uses: azure/webapps-deploy@v3
        id: deploy-to-webapp
        with:
          app-name: 'php-finantial-api'
          slot-name: 'Production'
          package: .

      - name: Run Artisan commands after deployment
        run: |
          echo "Running artisan commands..."

          # Ensure correct configuration and cache
          php artisan config:cache
          php artisan route:cache

          # Run migrations (force for production environment)
          php artisan migrate --force

          # Install Laravel Passport (only if not already installed in your environment)
          php artisan passport:install

          # Seed the database (use --force in production)
          php artisan db:seed --force

          # Generate the application key (optional, only if not already set)
          php artisan key:generate
        env:
          APP_KEY: ${{ secrets.APP_KEY }} # Ensure this is stored in your GitHub secrets
          DB_CONNECTION: ${{ secrets.DB_CONNECTION }} # Optional: for the database connection
